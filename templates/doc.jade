mixin parameters(params)
  each val in params
    +parameter(val)

mixin parameter(param)
  if param
    .col1.miniSpacer
      .col1-3.red.miniSpacer= param.name
      .col1-3.monospace= param.type
      .col1-3= param.description
      // todo: .col1-3= param.optional

mixin methods(method, pathPrefix)
  if method.access == 'private' || method.access == 'protected'
    .col1.method-block.spacer-bar.miniSpacer.private-method.hidden
      +method(method, pathPrefix)
  else
    .col1.method-block.spacer-bar.miniSpacer
      +method(method, pathPrefix)

mixin method(method, pathPrefix)
  .method-item
    +methodName(method.name, method.params, pathPrefix, method.access, method.static, method.deprecated)

    p= method.description

    if method.params
      +titleBlock("Parameters")
      each val in method.params
        +parameter(val)

    if method.return
      +returnBlock(method.return)

    if method.example
      +exampleBlock(method.example)

mixin returnBlock(returns)
  +titleBlock("Returns")
  col1.miniSpacer
    .col1-3.red= returns.type
    .col2-3= returns.description

mixin directLink(name, pathPrefix)
  a.relative(href="##{name}")
    img.absolute.anchor(src="#{pathPrefix}/images/link_white.svg" width="15")

mixin methodName(name, params, pathPrefix, access, static, deprecated)
  .col1.linkable
    +directLink(name, pathPrefix)
    h4.mar-t1.left(id="#{name}")=name
      if params
        |  (
        - for (var i = 0; i < params.length; i++)
          - var param = (i == params.length - 1) ? params[i].name + ')' : params[i].name + ', ';
            = param
      if (access == 'private')
        small.mar-l-20.medium-grey-bg.pad-5.up3.bor-2 Private

      if access == 'protected'
        small.mar-l-20.medium-grey-bg.pad-5.up3.bor-2 Protected

      if static
        small.mar-l-20.medium-grey-bg.pad-5.up3.bor-2 Static

      if deprecated
        small.mar-l-20.red.medium-grey-bg.pad-5.up3.bor-2 Deprecated


mixin otherClasses(classes, pathPrefix)
  ul.mar-20
    each module in classes
      - var validClasses = false;
      - for (var klass in module.data) {
      -   if (module.data[klass].access !== 'protected' && module.data[klass].access !== 'private') {
      -     validClasses = true;
      -   } 
      - }
      if validClasses
        li= module.name
        each detail in module.data
          if detail.access !== 'protected'
            li
              -var href = detail.path + '.html'
              a(href='#{pathPrefix}#{href}')
                =detail.key

mixin eventBlock(name, events, id, pathPrefix)
  h5.medium-grey.miniSpacer.col1= name
  each event in events
    .col1.event-block.miniSpacer(id="#{id + event.name}")
      p.col1 
        +methodName(event.name, event.params, pathPrefix)
      each val in event.params
        +parameter(val)

mixin titleBlock(title)
  h5.medium-grey.miniSpacer.col1= title

mixin titleBlockHalf(title)
  h5.medium-grey.miniSpacer.col1-2= title

mixin constructorBlock(name, params, pathPrefix )
  +methodName( name, params, pathPrefix )
  +titleBlock("Constructor Parameters")
  .col1.spacer-bar.mar-b
    each val in params
      p.col1-3= val.name
      p.col1-3.monospace= val.type
      p.col1-3= val.description
      if val.props
        .left.mar-20
          each prop in val.props
            .col1(id="options-#{prop.name}")
              +parameter(prop)
              if prop.props
                .left.mar-20
                each p in prop.props
                  +parameter(p)

mixin exampleBlock(example)
  +titleBlock("Example")
  each exam in example
    pre
      code.highlighter
        != highlight(exam)

mixin quickNav(params, classitems, events, eventInputs, eventOutputs, css)
  if params || classitems.length || events.length || eventInputs.length || eventOutputs.length || css
    .col1.miniSpacer.spacer-bar.mar-b
      h3.col-1 Overview
      if params && params.length
        .col1-3
          h5 Options
          each val in params
            if val.props
              each prop in val.props
                a.col1(href="#options-#{prop.name}")= prop.name


      if classitems.length
        .col1-3
          h5 Methods
          for method in classitems
            if method.access !== 'private' && method.acess !== 'protected'
              a.col1(href="##{method.name}")= method.name

      if events.length || eventInputs.length || eventOutputs.length
        .col1-3
          +quickNavEvent(events, 'event', 'Events')
          +quickNavEvent(eventInputs, 'eventInputs', 'Event Inputs')
          +quickNavEvent(eventOutputs, 'eventOutputs', 'Event Outputs')

      if css
        .col1-3
          h5 CSS Selectors
          for selector in css
            a.col1(href="#css-#{selector.name}")= selector.tag


mixin quickNavEvent(events, eventPrefix, headerName)
  if events.length
    .col1.miniSpacer
      if headerName
        h5= headerName
      each event in events
        - var prefixed = eventPrefix + event.name
        a.col1(href="##{prefixed}")= event.name

mixin cssBlock(css)
  +titleBlock("CSS Classes")
  .col1.spacer-bar.mar-b
    each selector in css
      .col1(id="css-#{selector.name}").miniSpacer
        .col1-3.red= selector.tag
        .col2-3= selector.description


doctype html
html
  head
    meta(charset='utf-8')
    meta(http-equiv='X-UA-Compatible', content='IE=edge,chrome=1')
    meta(name='description', content='A free, open source JavaScript framework for creating complex UIs for any screen. 3D layout and physics animation engines. Renders to DOM, Canvas, or WebGL')
    title Famo.us
    meta(name='apple-mobile-web-app-capable', content='yes')
    meta(name='apple-mobile-web-app-status-bar-style', content='black')
    meta(name='viewport', content='width=device-width')
    link(rel='icon', type='image/png', href='#{pathPrefix}/favicon.png')
    link(rel='stylesheet', href='#{pathPrefix}/css/famous_styles.css')
  body
    if header
      !{header}
    #doc-container.col1
      .col1.navigation-margin.relative.pad20
        .col1
          .col1-4
            +otherClasses(classes, pathPrefix)
          .col1-2
            #docs-container.cf.docs.col1.pad-g1.main
              .col1.pad-ls-g1.pad-t1
                .col1.spacer
                  .col1.spacer-bar.mar-b
                    h2.col1= name
                    h6.miniSpacer= description

                  +quickNav(params, classitems, events, eventInputs, eventOutputs, css)

                  if params
                    +constructorBlock(name, params, pathPrefix, is_singleton, is_factory)

                  if events.length || eventInputs.length || eventOutputs.length
                    .col1.spacer-bar.mar-b
                      if events.length
                        +eventBlock("Events", events, 'event', pathPrefix)

                      if eventInputs.length
                        +eventBlock("Event Input", eventInputs, 'eventInputs', pathPrefix)

                      if eventOutputs.length
                        +eventBlock("Event Output", eventOutputs, 'eventOutputs', pathPrefix)

                  if css
                    +cssBlock(css)

                  if classitems.length
                    +titleBlockHalf("Methods")
                    .col1-2
                      label.right(for="input-private") Show Private Methods
                      input.right.down5(type="checkbox" id="input-private" data-type="private")
                    each method in classitems
                      +methods(method, pathPrefix)

                  if example
                    +exampleBlock(example)
    if footer
      !{footer}
  script.
    var input = document.getElementById('input-private');
    var elements = Array.prototype.slice.call(document.getElementsByClassName('private-method'));
    input.onclick = function() {
      setElementsVisible();
    }
    function setElementsVisible () {
      for (var i=0; i<elements.length; i++) {
        var elem = elements[i];
        elem.classList.toggle('hidden');
      }
    }
